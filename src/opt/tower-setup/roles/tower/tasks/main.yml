---
# Tasks for installing and configuring the Ansible Tower application.

- name: Ensure awx is in the nginx group
  user:
    append: yes
    name: awx
    groups: nginx

- name: Configure the Tower settings directory.
  file: path=/etc/tower state=directory owner=root group={{aw_group}} mode=0755

- name: Configure the Tower socket directory.
  file: path=/var/run/tower state=directory owner=nginx group=nginx mode=2775

- name: Configure the Tower system user's home directory.
  file: path={{awx_install_home}} state=directory owner={{aw_user}} group={{aw_group}} mode=0755

- name: Configure the Tower system user's .ssh directory.
  file: path={{awx_install_home}}/.ssh state=directory owner={{aw_user}} group={{aw_group}} mode=0700

- name: Configure the Tower projects directory.
  file: path={{awx_install_home}}/projects state=directory owner={{aw_user}} group={{aw_group}} mode=0750

- name: Configure the Tower job output directory.
  file: path={{awx_install_home}}/job_status state=directory owner={{aw_user}} group={{aw_group}} mode=0750

- name: Configure the Tower static directory.
  file: path={{awx_install_home}}/public/static state=directory owner=root group={{aw_group}} mode=0755 recurse=yes

- name: Add Towers `conf.d` directory.
  file: path=/etc/tower/conf.d state=directory owner=root group={{aw_group}} mode=0750

- name: configure tower log directory
  file: path=/var/log/tower state=directory owner={{aw_user}} group={{aw_group}} mode=0750

- name: Configure Towers database settings.
  template:
    dest: /etc/tower/conf.d/postgres.py
    force: yes
    src: postgres.py.j2
    mode: '0640'
    owner: root
    group: '{{ aw_group }}'
  register: result

- name: Configure Towers channels settings.
  template:
    dest: /etc/tower/conf.d/channels.py
    force: yes
    src: channels.py.j2
    mode: '0640'
    owner: root
    group: '{{ aw_group }}'
  when: "rabbitmq_password is defined and rabbitmq_password != ''"

- name: Configure the Insights URL
  template:
    dest: /etc/tower/conf.d/insights.py
    force: yes
    src: insights.py.j2
    mode: '0640'
    owner: root
    group: '{{ aw_group }}'

- name: Initialize instance groups for host
  set_fact:
    awx_instance_groups: [ 'localhost' ]

- name: Install Tower rabbitmq settings
  template:
    dest: /etc/tower/conf.d/rabbitmq.py
    force: yes
    src: rabbitmq.py.j2
    mode: '0640'
    owner: root
    group: '{{ aw_group }}'

- name: Install Tower cache settings
  template:
    dest: /etc/tower/conf.d/caching.py
    force: yes
    src: caching.py.j2
    mode: '0640'
    owner: root
    group: '{{ aw_group }}'

- name: Set default image for Container Groups
  template:
    dest: /etc/tower/conf.d/container_groups.py
    force: yes
    src: container_groups.py.j2
    mode: '0640'
    owner: root
    group: '{{ aw_group }}'

- name: Set default image for Container Groups
  template:
    dest: /etc/tower/conf.d/custom.py
    force: yes
    src: custom.py.j2
    mode: '0640'
    owner: root
    group: '{{ aw_group }}'

- name: Install Tower's settings file if it doesn't already exist.
  template:
    dest: /etc/tower/settings.py
    force: yes
    backup: yes
    src: settings.py.j2
    mode: '0640'
    owner: root
    group: '{{ aw_group }}'

- name: Migrate the Tower database schema (may take awhile when upgrading).
  command: awx-manage migrate --noinput
  become_user: '{{ aw_user }}'
  become: True
  register: tower_migrate
  changed_when: "tower_migrate.stdout is defined and 'No migrations to apply' not in tower_migrate.stdout"

- name: Checking for RBAC migration log
  stat: path=/tmp/tower_rbac_migrations.log
  register: rbac_log

- name: Moving RBAC migration log
  command: mv /tmp/tower_rbac_migrations.log /var/log/tower
  when: rbac_log.stat.exists

- name: get the tower version
  shell: awx-manage version
  become_user: '{{ aw_user }}'
  become: True
  register: tower_version

- name: store the tower version
  copy:
    dest: '{{ awx_install_home }}/.tower_version'
    owner: root
    group: root
    mode: 0644
    content: '{{ tower_version.stdout }}'
  become_user: root
  become: True

- name: Check for Tower Super users
  shell: echo "from django.contrib.auth.models import User; nsu = User.objects.filter(is_superuser=True).count(); exit(0 if nsu > 0 else 1)" | awx-manage shell
  register: super_check
  become_user: '{{ aw_user }}'
  become: True
  #ignore_errors: yes
  failed_when: super_check.rc != 0 and super_check.rc != 1
  #changed_when: super_check.rc > 0

- name: create django super user if it does not exist
  shell: awx-manage createsuperuser --noinput --username='{{ admin_username }}' --email='{{ admin_email }}'
  become_user: '{{ aw_user }}'
  become: True
  no_log: True
  register: result
  changed_when: "'Superuser created successfully' in result.stdout"
  when: super_check.rc > 0

- name: update django super user password
  shell: awx-manage update_password --username='{{ admin_username }}' --password='{{ admin_password }}'
  become_user: '{{ aw_user }}'
  become: True
  no_log: True
  register: result
  changed_when: "'Password updated' in result.stdout"
  when: admin_password != ''

- name: Collect static files for Tower.
  command: awx-manage collectstatic --noinput --clear -v0
  become_user: root
  become: True
